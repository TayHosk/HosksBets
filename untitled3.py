# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18UnYqHgL8TL8oomTxOHgMEQSrhgjYxh7
"""

# app_v4_prop_model.py
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression, LogisticRegression
from sklearn.metrics import mean_squared_error
from scipy.stats import norm
import matplotlib.pyplot as plt

st.set_page_config(page_title="NFL Player Prop Model (v4)", layout="centered")

# ====== GOOGLE SHEETS (your 10 sheets) ======
SHEET_TOTAL_OFFENSE = "1DFZRqOiMXbIoEeLaNaWh-4srxeWaXscqJxIAHt9yq48"
SHEET_TOTAL_PASS_OFF = "1QclB5ajymBsCC09j8s4Gie_bxj4ebJwEw4kihG6uCng"
SHEET_TOTAL_RUSH_OFF = "1SJ_Y1ljU44lOjbNHuXGyKGiF3mgQxjAjX8H3j"
SHEET_PLAYER_REC = "a4ge7UKHnC7wUpJltgioTuCQNuwOiC5ecZReM"
SHEET_PLAYER_RUSH = "1c0xpi_wZSf8VhkSPzzchxvhzAQHK0tFetakdRqb3e6k"
SHEET_PLAYER_PASS = "1I9YNSQMylW_waJs910q4S6SM8CZE"
SHEET_DEF_RB = "1xTP8tMnEVybu9vYuN4i6IIrI71q1j60BuqVC40fjNeY"
SHEET_DEF_QB = "1SEwUdExz7Px61FpRNQX3bUsxVFtK97JzuQhTddVa660"
SHEET_DEF_WR = "14klXrrHHCLlXhW6-F-9eJIz3dkp_ROXVSeehlM8TYAo"
SHEET_DEF_TE = "1yMpgtx1ObYLDVufTMR5Se3KrMi1rG6UzMzLcoptwhi4"

def load_sheet(sheet_id: str) -> pd.DataFrame:
    url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv"
    return pd.read_csv(url)

# ====== LOAD ALL SHEETS ======
try:
    total_off = load_sheet(SHEET_TOTAL_OFFENSE)
    total_pass = load_sheet(SHEET_TOTAL_PASS_OFF)
    total_rush = load_sheet(SHEET_TOTAL_RUSH_OFF)
    p_rec = load_sheet(SHEET_PLAYER_REC)
    p_rush = load_sheet(SHEET_PLAYER_RUSH)
    p_pass = load_sheet(SHEET_PLAYER_PASS)
    d_rb = load_sheet(SHEET_DEF_RB)
    d_qb = load_sheet(SHEET_DEF_QB)
    d_wr = load_sheet(SHEET_DEF_WR)
    d_te = load_sheet(SHEET_DEF_TE)
except Exception:
    st.error("‚ùå Error loading one or more Google Sheets. Make sure they are shared as 'Anyone with the link'.")
    st.stop()

st.title("üèà NFL Player Prop Model (v4)")
st.write("Single player ‚Üí multiple props ‚Üí yards + over/under + anytime TD, using your live Google Sheets.")

# ====== USER INPUTS ======
player_name = st.text_input("Player name (exact as in your player sheets)")
opponent_team = st.text_input("Opponent team name (must match 'Team' in defense sheets)")

prop_options = [
    "passing_yards",
    "rushing_yards",
    "receiving_yards",
    "receptions",
    "targets",
    "carries",
    "anytime_td",
]
selected_props = st.multiselect(
    "Select props to evaluate",
    prop_options,
    default=["rushing_yards"]
)

# sportsbook lines, one per prop (except anytime TD)
lines = {}
for prop in selected_props:
    if prop == "anytime_td":
        continue
    lines[prop] = st.number_input(f"Sportsbook line for {prop}", value=50.0, key=f"line_{prop}")

if not player_name or not opponent_team or not selected_props:
    st.stop()

# ====== FIND PLAYER IN SHEETS (auto-detect source) ======
player_df = None
player_pos = None
source_sheet = None

if player_name.lower() in p_rec["Player"].str.lower().values:
    player_df = p_rec[p_rec["Player"].str.lower() == player_name.lower()].copy()
    player_pos = player_df.iloc[0].get("Position", "WR")
    source_sheet = "receiving"
elif player_name.lower() in p_rush["Player"].str.lower().values:
    player_df = p_rush[p_rush["Player"].str.lower() == player_name.lower()].copy()
    player_pos = player_df.iloc[0].get("Position", "RB")
    source_sheet = "rushing"
elif player_name.lower() in p_pass["Player"].str.lower().values:
    player_df = p_pass[p_pass["Player"].str.lower() == player_name.lower()].copy()
    player_pos = "QB"
    source_sheet = "passing"
else:
    st.error("‚ùå Player not found in receiving, rushing, or passing sheets.")
    st.stop()

# ====== HELPER: run yards/receptions model ======
def run_yardage_model(player_df, player_pos, prop_type, opponent_team):
    defense_df = None
    td_col_player = None
    td_col_def = None

    if prop_type == "passing_yards":
        stat_col = "Passing_Yds" if "Passing_Yds" in player_df.columns else "Passing_Yards"
        defense_df = d_qb
        td_col_player = "Pass_TD" if "Pass_TD" in player_df.columns else "Passing_TDs" if "Passing_TDs" in player_df.columns else None
        td_col_def = "Pass_TDs_Allowed" if "Pass_TDs_Allowed" in defense_df.columns else None

    elif prop_type == "rushing_yards":
        stat_col = "Rush_Yds" if "Rush_Yds" in player_df.columns else "Rushing_Yards"
        if player_pos == "QB":
            defense_df = d_qb
        else:
            defense_df = d_rb
        td_col_player = "Rush_TD" if "Rush_TD" in player_df.columns else "Rushing_TDs" if "Rushing_TDs" in player_df.columns else None
        td_col_def = "Rush_TDs_Allowed" if "Rush_TDs_Allowed" in defense_df.columns else None

    elif prop_type == "receiving_yards":
        stat_col = "Rec_Yds" if "Rec_Yds" in player_df.columns else "Receiving_Yards"
        if player_pos == "TE":
            defense_df = d_te
        elif player_pos == "RB":
            defense_df = d_rb
        else:
            defense_df = d_wr
        td_col_player = "Rec_TD" if "Rec_TD" in player_df.columns else "Receiving_TDs" if "Receiving_TDs" in player_df.columns else None
        td_col_def = "Rec_TDs_Allowed" if "Rec_TDs_Allowed" in defense_df.columns else None

    elif prop_type in ["receptions", "targets"]:
        stat_col = "Rec" if prop_type == "receptions" else "Tgt"
        if player_pos == "TE":
            defense_df = d_te
        elif player_pos == "RB":
            defense_df = d_rb
        else:
            defense_df = d_wr
        td_col_player = "Rec_TD" if "Rec_TD" in player_df.columns else "Receiving_TDs" if "Receiving_TDs" in player_df.columns else None
        td_col_def = "Rec_TDs_Allowed" if "Rec_TDs_Allowed" in defense_df.columns else None

    elif prop_type == "carries":
        stat_col = "Rush_Att" if "Rush_Att" in player_df.columns else "Carries"
        if player_pos == "QB":
            defense_df = d_qb
        else:
            defense_df = d_rb
        td_col_player = "Rush_TD" if "Rush_TD" in player_df.columns else "Rushing_TDs" if "Rushing_TDs" in player_df.columns else None
        td_col_def = "Rush_TDs_Allowed" if "Rush_TDs_Allowed" in defense_df.columns else None

    else:
        return None

    if stat_col not in player_df.columns:
        return None

    merged = player_df.merge(defense_df, left_on="Opponent", right_on="Team", how="left")
    merged["rolling_avg_3"] = merged[stat_col].rolling(3, 1).mean()
    season_avg = merged[stat_col].mean()

    features = ["rolling_avg_3"]
    # pick first "Allowed" column in defense sheet as matchup factor
    allowed_cols = [c for c in defense_df.columns if "Allowed" in c or "allowed" in c]
    def_col = allowed_cols[0] if allowed_cols else None
    if def_col:
        features.append(def_col)

    X = merged[features].fillna(0)
    y = merged[stat_col].fillna(0)

    if len(X) < 2:
        return None

    model = LinearRegression().fit(X, y)
    preds = model.predict(X)
    rmse = np.sqrt(mean_squared_error(y, preds)) if len(y) > 1 else np.std(y)

    opp_row = defense_df[defense_df["Team"].str.lower() == opponent_team.lower()]
    if opp_row.empty:
        return None

    last3 = merged[stat_col].tail(3).mean()
    feat_next = [last3]
    if def_col:
        feat_next.append(float(opp_row.iloc[0][def_col]))
    pred_next = model.predict([feat_next])[0]

    return {
        "stat_col": stat_col,
        "season_avg": season_avg,
        "last3": last3,
        "pred_next": pred_next,
        "rmse": rmse,
        "td_col_player": td_col_player,
        "td_col_def": td_col_def,
        "def_df": defense_df,
        "merged": merged,
    }

# ====== HELPER: anytime TD ======
def estimate_anytime_td(player_df, defense_df, opponent_team, td_col_player, td_col_def):
    if not td_col_player or td_col_player not in player_df.columns:
        return None

    td_series = player_df[td_col_player].fillna(0)
    y_td = (td_series > 0).astype(int)

    merged_td = player_df.merge(defense_df, left_on="Opponent", right_on="Team", how="left")
    merged_td["td_rolling_3"] = td_series.rolling(3, 1).mean()

    features = ["td_rolling_3"]
    opp_row = defense_df[defense_df["Team"].str.lower() == opponent_team.lower()]
    if td_col_def and td_col_def in defense_df.columns:
        features.append(td_col_def)

    X_td = merged_td[features].fillna(0)

    if y_td.sum() == 0 or len(X_td) < 2:
        return float(y_td.mean())  # fallback to historical rate

    lg = LogisticRegression()
    lg.fit(X_td, y_td)

    # current row
    curr_feats = [td_series.tail(3).mean()]
    if td_col_def and not opp_row.empty and td_col_def in opp_row.columns:
        curr_feats.append(float(opp_row.iloc[0][td_col_def]))
    prob = lg.predict_proba([curr_feats])[0][1]
    return prob

# ====== RUN FOR EACH SELECTED PROP ======
results = []

for prop in selected_props:
    if prop == "anytime_td":
        continue
    model_res = run_yardage_model(player_df, player_pos, prop, opponent_team)
    if model_res is None:
        st.warning(f"Could not model {prop} for {player_name}. Check column names in Sheets.")
        continue

    line_val = lines.get(prop, None)
    if line_val is None:
        continue

    pred_next = model_res["pred_next"]
    rmse = model_res["rmse"]
    z = (line_val - pred_next) / rmse if rmse and rmse > 0 else 1
    prob_over = 1 - norm.cdf(z)
    prob_under = 1 - prob_over

    results.append({
        "prop": prop,
        "line": line_val,
        "pred": pred_next,
        "season_avg": model_res["season_avg"],
        "last3": model_res["last3"],
        "prob_over": prob_over,
        "prob_under": prob_under,
        "stat_col": model_res["stat_col"],
        "merged": model_res["merged"],
        "td_col_player": model_res["td_col_player"],
        "td_col_def": model_res["td_col_def"],
        "def_df": model_res["def_df"],
    })

# ====== SHOW RESULTS ======
st.header("üìä Results")
for res in results:
    st.subheader(f"Prop: {res['prop']}")
    st.markdown(f"""
**Line:** {res['line']}
**Predicted:** {res['pred']:.2f}
**Season avg:** {res['season_avg']:.2f}
**Last 3 games avg:** {res['last3']:.2f}
**Probability of over:** {res['prob_over']*100:.1f}%
**Probability of under:** {res['prob_under']*100:.1f}%
""")

    # predicted vs line chart
    fig1, ax1 = plt.subplots()
    ax1.bar(["Predicted", "Line"], [res["pred"], res["line"]], color=["skyblue", "salmon"])
    ax1.set_ylabel(res["stat_col"])
    st.pyplot(fig1)

    # game log chart
    fig2, ax2 = plt.subplots()
    m = res["merged"]
    ax2.plot(m.index + 1, m[res["stat_col"]], marker="o")
    ax2.set_title(f"{player_name} ‚Äì {res['stat_col']} by game")
    ax2.set_xlabel("Game #")
    ax2.set_ylabel(res["stat_col"])
    ax2.grid(True)
    st.pyplot(fig2)

# ====== ANYTIME TD (only if selected) ======
if "anytime_td" in selected_props:
    # pick defense based on player position
    if player_pos == "QB":
        def_df = d_qb
        td_def_guess = "Pass_TDs_Allowed"
    elif player_pos == "RB":
        def_df = d_rb
        td_def_guess = "Rush_TDs_Allowed"
    elif player_pos == "TE":
        def_df = d_te
        td_def_guess = "Rec_TDs_Allowed"
    else:
        def_df = d_wr
        td_def_guess = "Rec_TDs_Allowed"

    # figure out which sheet the player was in
    if player_name.lower() in p_rec["Player"].str.lower().values:
        pdf = p_rec[p_rec["Player"].str.lower() == player_name.lower()].copy()
        td_prob = estimate_anytime_td(
            pdf,
            def_df,
            opponent_team,
            "Rec_TD" if "Rec_TD" in pdf.columns else "Receiving_TDs" if "Receiving_TDs" in pdf.columns else None,
            td_def_guess
        )
    elif player_name.lower() in p_rush["Player"].str.lower().values:
        pdf = p_rush[p_rush["Player"].str.lower() == player_name.lower()].copy()
        td_prob = estimate_anytime_td(
            pdf,
            def_df,
            opponent_team,
            "Rush_TD" if "Rush_TD" in pdf.columns else "Rushing_TDs" if "Rushing_TDs" in pdf.columns else None,
            "Rush_TDs_Allowed"
        )
    else:
        pdf = p_pass[p_pass["Player"].str.lower() == player_name.lower()].copy()
        td_prob = estimate_anytime_td(
            pdf,
            def_df,
            opponent_team,
            "Pass_TD" if "Pass_TD" in pdf.columns else "Passing_TDs" if "Passing_TDs" in pdf.columns else None,
            "Pass_TDs_Allowed"
        )

    st.subheader("üî• Anytime TD")
    if td_prob is not None:
        st.markdown(f"**Anytime TD probability:** {td_prob*100:.1f}%")
    else:
        st.markdown("Not enough TD data to estimate for this player.")